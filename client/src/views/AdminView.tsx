import { useState, useEffect } from 'react';
import { api } from '../api';
import { useUser } from '../hooks/useUser';
import { useCacheStats } from '../hooks/useData';
import type { User } from '../types';

interface AdminViewProps {
  onEditUserPredictions?: (userId: string) => void;
}

export function AdminView({ onEditUserPredictions }: AdminViewProps = {}) {
  const { user, claimAdmin } = useUser();
  const isAdmin = user?.role === 'ADMIN';
  const { stats, loading: loadingStats, refreshCache } = useCacheStats(isAdmin);
  
  const [syncing, setSyncing] = useState(false);
  const [recalcing, setRecalcing] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [password, setPassword] = useState('');
  const [wiping, setWiping] = useState(false);
  const [users, setUsers] = useState<User[]>([]);
  const [loadingUsers, setLoadingUsers] = useState(false);

  const handleClaimAdmin = async () => {
    try {
      await claimAdmin(password);
      setMessage('–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!');
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞');
    }
  };

  const handleSync = async () => {
    setSyncing(true);
    setError(null);
    try {
      const response = await api.syncMatches();
      setMessage(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${response.count} –º–∞—Ç—á–µ–π`);
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    } finally {
      setSyncing(false);
    }
  };

  const handleRecalc = async () => {
    setRecalcing(true);
    setError(null);
    try {
      const response = await api.recalcAll();
      setMessage(`–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –æ—á–∫–æ–≤ –ø–æ ${response.matches} –º–∞—Ç—á–∞–º`);
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞');
    } finally {
      setRecalcing(false);
    }
  };

  const handleWipeUsers = async () => {
    if (!password) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      return;
    }
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) return;
    setWiping(true);
    setError(null);
    try {
      const response = await api.wipeUsers(password);
      setMessage(`–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.deletedUsers}`);
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } finally {
      setWiping(false);
    }
  };

  useEffect(() => {
    if (user?.role === 'ADMIN') {
      loadUsers();
    }
  }, [user]);

  const loadUsers = async () => {
    setLoadingUsers(true);
    try {
      const response = await api.getUsers();
      setUsers(response.users);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } finally {
      setLoadingUsers(false);
    }
  };

  const handleRefreshCache = async () => {
    try {
      await refreshCache();
      setMessage('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞');
    }
  };

  const formatCacheAge = (age: number) => {
    const seconds = Math.floor(age / 1000);
    if (seconds < 60) return `${seconds}—Å`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}–º ${seconds % 60}—Å`;
    const hours = Math.floor(minutes / 60);
    return `${hours}—á ${minutes % 60}–º`;
  };

  return (
    <div>
      <div className="header">
        ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        {isAdmin && <span className="admin-badge">ADMIN</span>}
      </div>

      <div className="container">
        {!isAdmin && (
          <div className="match-card">
            <h3>–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</h3>
            <p>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
            <div className="prediction-form" style={{ marginTop: '8px' }}>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–ü–∞—Ä–æ–ª—å"
                className="score-input"
                style={{ width: '120px' }}
              />
              <button onClick={handleClaimAdmin} className="predict-button" disabled={!password}>
                –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
              </button>
            </div>
          </div>
        )}

        {isAdmin && (
          <>
            <div className="match-card">
              <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞</h3>
              <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ API –ª–∏–º–∏—Ç–∞—Ö</p>
              {loadingStats ? (
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
              ) : (
                <div style={{ marginBottom: '16px' }}>
                  {Object.entries(stats).map(([key, info]: [string, any]) => (
                    <div key={key} style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      padding: '4px 0',
                      borderBottom: '1px solid #eee'
                    }}>
                      <span>{key}:</span>
                      <span style={{ color: info.expired ? '#dc3545' : '#28a745' }}>
                        {formatCacheAge(info.age)} / {Math.floor(info.ttl / 1000)}—Å
                        {info.expired && ' (–∏—Å—Ç–µ–∫)'}
                      </span>
                    </div>
                  ))}
                </div>
              )}
              <button
                onClick={handleRefreshCache}
                className="predict-button"
                style={{ marginRight: '8px' }}
              >
                –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
              </button>
            </div>

            <div className="match-card">
              <h3>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ–π</h3>
              <p>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –õ–∏–≥–∏ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏–∑ football-data.org (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É)</p>
              <button
                onClick={handleSync}
                disabled={syncing}
                className="predict-button"
              >
                {syncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å'}
              </button>
            </div>

            <div className="match-card">
              <h3>–ü–µ—Ä–µ—Å—á—ë—Ç –æ—á–∫–æ–≤</h3>
              <p>–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –º–∞—Ç—á–∞–º</p>
              <button
                onClick={handleRecalc}
                disabled={recalcing}
                className="predict-button"
              >
                {recalcing ? '–ü–µ—Ä–µ—Å—á—ë—Ç...' : '–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏'}
              </button>
            </div>

            <div className="match-card">
              <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏</h3>
              <p>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
              {loadingUsers ? (
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>
              ) : (
                <div className="users-list">
                  {users.length === 0 ? (
                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                  ) : (
                    users.map(u => (
                      <div key={u.id} className="user-item">
                        <div className="user-info">
                          <span className="user-name">{u.name}</span>
                          <span className="user-role">{u.role}</span>
                        </div>
                        {onEditUserPredictions && (
                          <button
                            onClick={() => onEditUserPredictions(u.id)}
                            className="edit-predictions-button"
                          >
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã
                          </button>
                        )}
                      </div>
                    ))
                  )}
                </div>
              )}
            </div>

            <div className="match-card">
              <h3>–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
              <p>–¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</p>
              <div className="prediction-form" style={{ marginTop: '8px' }}>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  className="score-input"
                  style={{ width: '120px' }}
                />
                <button
                  onClick={handleWipeUsers}
                  disabled={wiping || !password}
                  className="predict-button"
                >
                  {wiping ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
                </button>
              </div>
            </div>
          </>
        )}

        {message && (
          <div className="match-card" style={{ background: '#d4edda', border: '1px solid #c3e6cb' }}>
            {message}
          </div>
        )}

        {error && (
          <div className="error">
            {error}
          </div>
        )}
      </div>
    </div>
  );
}
