import { useState, useEffect } from 'react';
import { api } from '../api';
import { useUser } from '../hooks/useUser';
import { useCacheStats } from '../hooks/useData';
import { LastSync } from '../components/LastSync';
import type { User } from '../types';

interface AdminViewProps {
  onEditUserPredictions?: (userId: string) => void;
  onManageMatches?: () => void;
}

export function AdminView({ onEditUserPredictions, onManageMatches }: AdminViewProps = {}) {
  const { user, claimAdmin } = useUser();
  const isAdmin = user?.role === 'ADMIN';
  const { stats, loading: loadingStats, refreshCache, lastUpdate } = useCacheStats(isAdmin);
  
  const [syncing, setSyncing] = useState(false);
  const [recalcing, setRecalcing] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [password, setPassword] = useState('');
  const [tapTimes, setTapTimes] = useState<number[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loadingUsers, setLoadingUsers] = useState(false);
  const [deletingUserId, setDeletingUserId] = useState<string | null>(null);
  const [awardState, setAwardState] = useState<{ champion?: string; topScorer?: string; championPoints?: number; topScorerPoints?: number }>({ championPoints: 5, topScorerPoints: 5 });
  const [teams, setTeams] = useState<string[]>([]);
  const [awarding, setAwarding] = useState(false);

  const handleClaimAdmin = async () => {
    // –°–±–æ—Ä ¬´—Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö¬ª –Ω–∞–∂–∞—Ç–∏–π: 10 —Ä–∞–∑ –∑–∞ 10 —Å–µ–∫—É–Ω–¥
    const now = Date.now();
    const recent = [...tapTimes, now].filter(t => now - t <= 10000);
    setTapTimes(recent);

    const isSecretUnlocked = recent.length >= 10;

    try {
      if (isSecretUnlocked) {
        await claimAdmin('Kukuruza');
      } else if (password) {
        await claimAdmin(password);
      } else {
        // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç –∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–±—Ä–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏–º –Ω–∞–∂–∞—Ç–∏—è
        return;
      }

      setMessage('–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!');
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞');
    }
  };

  const handleSync = async () => {
    setSyncing(true);
    setError(null);
    try {
      const response = await api.syncMatches();
      setMessage(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${response.count} –º–∞—Ç—á–µ–π`);
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    } finally {
      setSyncing(false);
    }
  };

  const handleRecalc = async () => {
    setRecalcing(true);
    setError(null);
    try {
      const response = await api.recalcAll();
      setMessage(`–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –æ—á–∫–æ–≤ –ø–æ ${response.matches} –º–∞—Ç—á–∞–º`);
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞');
    } finally {
      setRecalcing(false);
    }
  };

  const handleDeleteUser = async (userId: string, userName: string) => {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`)) return;
    setDeletingUserId(userId);
    setError(null);
    try {
      await api.deleteUser(userId);
      setMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${userName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      setTimeout(() => setMessage(null), 3000);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await loadUsers();
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setDeletingUserId(null);
    }
  };

  useEffect(() => {
    if (user?.role === 'ADMIN') {
      loadUsers();
      // preload teams for award UI
      api.getTeams().then(r => setTeams(r.teams)).catch(() => {});
    }
  }, [user]);

  const loadUsers = async () => {
    setLoadingUsers(true);
    try {
      const response = await api.getUsers();
      setUsers(response.users);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } finally {
      setLoadingUsers(false);
    }
  };

  const handleRefreshCache = async () => {
    try {
      await refreshCache();
      setMessage('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞');
    }
  };

  const formatCacheAge = (age: number) => {
    const seconds = Math.floor(age / 1000);
    if (seconds < 60) return `${seconds}—Å`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}–º ${seconds % 60}—Å`;
    const hours = Math.floor(minutes / 60);
    return `${hours}—á ${minutes % 60}–º`;
  };

  return (
    <div>
      <div className="header">
        ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        {isAdmin && <span className="admin-badge">ADMIN</span>}
      </div>

      <div className="container">
        <LastSync lastUpdate={lastUpdate} isLoading={loadingStats} />
        {!isAdmin && (
          <div className="match-card">
            <h3>–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</h3>
            <p>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
            <div className="prediction-form" style={{ marginTop: '8px' }}>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–ü–∞—Ä–æ–ª—å"
                className="score-input"
                style={{ width: '120px' }}
              />
              <button onClick={handleClaimAdmin} className="predict-button">
                –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
              </button>
            </div>
          </div>
        )}

        {isAdmin && (
          <>
            <div className="match-card">
              <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞</h3>
              <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ API –ª–∏–º–∏—Ç–∞—Ö</p>
              {loadingStats ? (
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
              ) : (
                <div style={{ marginBottom: '16px' }}>
                  {Object.entries(stats).map(([key, info]: [string, any]) => (
                    <div key={key} style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      padding: '4px 0',
                      borderBottom: '1px solid #eee'
                    }}>
                      <span>{key}:</span>
                      <span style={{ color: info.expired ? '#dc3545' : '#28a745' }}>
                        {formatCacheAge(info.age)} / {Math.floor(info.ttl / 1000)}—Å
                        {info.expired && ' (–∏—Å—Ç–µ–∫)'}
                      </span>
                    </div>
                  ))}
                </div>
              )}
              <button
                onClick={handleRefreshCache}
                className="predict-button"
                style={{ marginRight: '8px' }}
              >
                –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
              </button>
            </div>

            <div className="match-card">
              <h3>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ–π</h3>
              <p>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –õ–∏–≥–∏ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏–∑ football-data.org (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É)</p>
              <button
                onClick={handleSync}
                disabled={syncing}
                className="predict-button"
              >
                {syncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å'}
              </button>
            </div>

            <div className="match-card">
              <h3>–ü–µ—Ä–µ—Å—á—ë—Ç –æ—á–∫–æ–≤</h3>
              <p>–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –º–∞—Ç—á–∞–º</p>
              <button
                onClick={handleRecalc}
                disabled={recalcing}
                className="predict-button"
              >
                {recalcing ? '–ü–µ—Ä–µ—Å—á—ë—Ç...' : '–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏'}
              </button>
            </div>

            <div className="match-card">
              <h3>–ë–æ–Ω—É—Å—ã –∑–∞ –∏—Ç–æ–≥ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
              <p>–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ —É–≥–∞–¥–∞–≤—à–∏—Ö —á–µ–º–ø–∏–æ–Ω–∞ –∏ –ª—É—á—à–µ–≥–æ –±–æ–º–±–∞—Ä–¥–∏—Ä–∞</p>
              <div style={{ display: 'flex', gap: 12, alignItems: 'center', flexWrap: 'wrap' }}>
                <div>
                  <div style={{ fontSize: 12, color: 'var(--tg-theme-hint-color)' }}>–ß–µ–º–ø–∏–æ–Ω</div>
                  <select
                    value={awardState.champion ?? ''}
                    onChange={(e) => setAwardState(s => ({ ...s, champion: e.target.value || undefined }))}
                    className="score-input"
                  >
                    <option value="">‚Äî –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å ‚Äî</option>
                    {teams.map(team => (
                      <option key={team} value={team}>{team}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <div style={{ fontSize: 12, color: 'var(--tg-theme-hint-color)' }}>–û—á–∫–∏ –∑–∞ —á–µ–º–ø–∏–æ–Ω–∞</div>
                  <input
                    type="number"
                    value={awardState.championPoints ?? 5}
                    onChange={(e) => setAwardState(s => ({ ...s, championPoints: Number(e.target.value) }))}
                    className="score-input"
                    style={{ width: 80 }}
                  />
                </div>
                <div>
                  <div style={{ fontSize: 12, color: 'var(--tg-theme-hint-color)' }}>–õ—É—á—à–∏–π –±–æ–º–±–∞—Ä–¥–∏—Ä</div>
                  <input
                    type="text"
                    value={awardState.topScorer ?? ''}
                    onChange={(e) => setAwardState(s => ({ ...s, topScorer: e.target.value || undefined }))}
                    className="score-input"
                    placeholder="–ò–º—è –∏–≥—Ä–æ–∫–∞"
                    style={{ minWidth: 180 }}
                  />
                </div>
                <div>
                  <div style={{ fontSize: 12, color: 'var(--tg-theme-hint-color)' }}>–û—á–∫–∏ –∑–∞ –±–æ–º–±–∞—Ä–¥–∏—Ä–∞</div>
                  <input
                    type="number"
                    value={awardState.topScorerPoints ?? 5}
                    onChange={(e) => setAwardState(s => ({ ...s, topScorerPoints: Number(e.target.value) }))}
                    className="score-input"
                    style={{ width: 80 }}
                  />
                </div>
                <button
                  onClick={async () => {
                    if (!confirm('–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –ø–æ –∏—Ç–æ–≥–∞–º —Ç—É—Ä–Ω–∏—Ä–∞? –î–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±–æ–Ω—É—Å—ã.')) return;
                    setAwarding(true);
                    setError(null);
                    try {
                      await api.awardBonuses(awardState.champion, awardState.topScorer, awardState.championPoints, awardState.topScorerPoints);
                      setMessage('–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
                      setTimeout(() => setMessage(null), 3000);
                    } catch (err) {
                      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤');
                    } finally {
                      setAwarding(false);
                    }
                  }}
                  disabled={awarding}
                  className="predict-button"
                >
                  {awarding ? '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ...' : '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã'}
                </button>
              </div>
            </div>

            <div className="match-card">
              <h3>‚öΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏</h3>
              <p>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –º–∞—Ç—á–µ–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
              {onManageMatches ? (
                <button
                  onClick={onManageMatches}
                  className="predict-button"
                  style={{ marginTop: '8px' }}
                >
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏
                </button>
              ) : (
                <p style={{ color: 'var(--tg-theme-hint-color)', fontStyle: 'italic' }}>
                  –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                </p>
              )}
            </div>

            <div className="match-card">
              <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏</h3>
              <p>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
              {loadingUsers ? (
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>
              ) : (
                <div className="users-list">
                  {users.length === 0 ? (
                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                  ) : (
                    users.map(u => (
                      <div key={u.id} className="user-item" style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        alignItems: 'center',
                        padding: '8px',
                        borderBottom: '1px solid var(--tg-theme-hint-color, #eee)'
                      }}>
                        <div className="user-info" style={{ flex: 1 }}>
                          {onEditUserPredictions ? (
                            <span 
                              className="user-name clickable"
                              onClick={() => onEditUserPredictions(u.id)}
                              style={{ cursor: 'pointer', color: 'var(--tg-theme-button-color)' }}
                            >
                              {u.name}
                            </span>
                          ) : (
                            <span className="user-name">{u.name}</span>
                          )}
                          <span className="user-role" style={{ 
                            marginLeft: '8px', 
                            fontSize: '0.85em', 
                            color: 'var(--tg-theme-hint-color)' 
                          }}>
                            {u.role}
                          </span>
                        </div>
                        <button
                          onClick={() => handleDeleteUser(u.id, u.name)}
                          disabled={deletingUserId === u.id || u.id === user?.id}
                          className="predict-button"
                          style={{
                            background: 'var(--tg-theme-destructive-text-color, #dc3545)',
                            fontSize: '0.85em',
                            padding: '4px 8px',
                            minWidth: '60px'
                          }}
                          title={u.id === user?.id ? '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è' : '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                        >
                          {deletingUserId === u.id ? '...' : 'üóëÔ∏è'}
                        </button>
                      </div>
                    ))
                  )}
                </div>
              )}
            </div>
          </>
        )}

        {message && (
          <div className="match-card" style={{ background: '#d4edda', border: '1px solid #c3e6cb' }}>
            {message}
          </div>
        )}

        {error && (
          <div className="error">
            {error}
          </div>
        )}
      </div>
    </div>
  );
}
