generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  tg_user_id          String              @unique
  name                String
  avatar              String?
  role                Role                @default(USER)
  createdAt           DateTime            @default(now())
  predictions         Prediction[]
  predictionHistories PredictionHistory[] @relation("UserHistory")
  scores              Score?
  // Admin-set tournament picks
  championPick        String?
  topScorerPick       String?
}

model Match {
  id                  String              @id @default(cuid())
  extId               String?             @unique
  stage               String
  group               String?
  leg                 Int?
  matchday            Int?
  homeTeam            String
  awayTeam            String
  kickoffAt           DateTime
  status              String
  scoreHome           Int?
  scoreAway           Int?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  predictions         Prediction[]
  predictionHistories PredictionHistory[] @relation("MatchHistory")
}

model Prediction {
  id        String    @id @default(cuid())
  userId    String
  matchId   String
  predHome  Int
  predAway  Int
  createdAt DateTime  @default(now())
  lockedAt  DateTime?
  match     Match     @relation(fields: [matchId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, matchId])
}

model PredictionHistory {
  id        String   @id @default(cuid())
  userId    String
  matchId   String
  predHome  Int
  predAway  Int
  createdAt DateTime @default(now())
  match     Match    @relation("MatchHistory", fields: [matchId], references: [id])
  user      User     @relation("UserHistory", fields: [userId], references: [id])
}

model Score {
  id           String    @id @default(cuid())
  userId       String    @unique
  pointsTotal  Int       @default(0)
  exactCount   Int       @default(0)
  diffCount    Int       @default(0)
  outcomeCount Int       @default(0)
  firstPredAt  DateTime?
  lastUpdated  DateTime  @default(now())
  // Additional points for end-of-tournament bonuses (champion/top scorer)
  bonusPoints  Int       @default(0)
  user         User      @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
