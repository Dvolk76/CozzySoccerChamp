/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö D1
 */

interface Env {
  DB: D1Database;
  BACKUP_BUCKET?: R2Bucket; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ R2
  BACKUP_WEBHOOK_URL?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö D1
 */
export async function createBackup(env: Env): Promise<{
  success: boolean;
  timestamp: string;
  tables: string[];
  size?: number;
  location?: string;
}> {
  const timestamp = new Date().toISOString();
  const backupData: any = {
    timestamp,
    version: '1.0',
    tables: {} as Record<string, any[]>,
  };

  try {
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tables = ['User', 'Match', 'Prediction', 'PredictionHistory', 'Score'];
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for (const table of tables) {
      const result = await env.DB.prepare(`SELECT * FROM ${table}`).all();
      backupData.tables[table] = result.results || [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const schemaResult = await env.DB.prepare(
      `SELECT sql FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'`
    ).all();
    backupData.schema = schemaResult.results || [];

    const backupJson = JSON.stringify(backupData, null, 2);
    const backupSize = new TextEncoder().encode(backupJson).length;

    // –í–∞—Ä–∏–∞–Ω—Ç 1: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ R2 (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if (env.BACKUP_BUCKET) {
      const filename = `backup-${timestamp.replace(/[:.]/g, '-')}.json`;
      await env.BACKUP_BUCKET.put(filename, backupJson, {
        httpMetadata: {
          contentType: 'application/json',
        },
        customMetadata: {
          timestamp,
          tables: tables.join(','),
          size: backupSize.toString(),
        },
      });

      console.log(`‚úÖ Backup saved to R2: ${filename}`);
      
      return {
        success: true,
        timestamp,
        tables,
        size: backupSize,
        location: `r2://${filename}`,
      };
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ webhook (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Telegram –∏–ª–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä)
    if (env.BACKUP_WEBHOOK_URL) {
      const response = await fetch(env.BACKUP_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: backupJson,
      });

      if (!response.ok) {
        throw new Error(`Webhook failed: ${response.statusText}`);
      }

      console.log(`‚úÖ Backup sent to webhook: ${env.BACKUP_WEBHOOK_URL}`);
      
      return {
        success: true,
        timestamp,
        tables,
        size: backupSize,
        location: 'webhook',
      };
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 3: –í–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)
    console.log(`‚úÖ Backup created: ${backupSize} bytes`);
    
    return {
      success: true,
      timestamp,
      tables,
      size: backupSize,
    };

  } catch (error) {
    console.error('‚ùå Backup failed:', error);
    throw error;
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞
 */
export async function restoreBackup(
  env: Env,
  backupData: any
): Promise<{ success: boolean; tablesRestored: string[] }> {
  const tablesRestored: string[] = [];

  try {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const [tableName, rows] of Object.entries(backupData.tables)) {
      if (!Array.isArray(rows) || rows.length === 0) continue;

      const columns = Object.keys(rows[0]);
      const placeholders = columns.map(() => '?').join(', ');
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏—è–º–∏
      const batchSize = 100;
      for (let i = 0; i < rows.length; i += batchSize) {
        const batch = rows.slice(i, i + batchSize);
        
        for (const row of batch) {
          const values = columns.map((col) => (row as any)[col]);
          await env.DB.prepare(
            `INSERT OR REPLACE INTO ${tableName} (${columns.join(', ')}) VALUES (${placeholders})`
          ).bind(...values).run();
        }
      }

      tablesRestored.push(tableName);
      console.log(`‚úÖ Restored ${rows.length} rows to ${tableName}`);
    }

    return {
      success: true,
      tablesRestored,
    };

  } catch (error) {
    console.error('‚ùå Restore failed:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
 */
export async function cleanupOldBackups(
  bucket: R2Bucket,
  keepLast: number = 30
): Promise<number> {
  const list = await bucket.list({ prefix: 'backup-' });
  
  if (!list.objects || list.objects.length <= keepLast) {
    return 0;
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
  const sorted = list.objects.sort((a, b) => 
    (b.uploaded?.getTime() || 0) - (a.uploaded?.getTime() || 0)
  );

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
  const toDelete = sorted.slice(keepLast);
  let deleted = 0;

  for (const obj of toDelete) {
    await bucket.delete(obj.key);
    deleted++;
  }

  console.log(`üóëÔ∏è Deleted ${deleted} old backups`);
  return deleted;
}

