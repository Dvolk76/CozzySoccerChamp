/**
 * Cloudflare Cron Job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–µ–∫–∞–ø–∞
 * 
 * –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –≤ wrangler.toml
 */

import { createBackup, cleanupOldBackups } from '../services/backup';

interface Env {
  DB: D1Database;
  BACKUP_BUCKET?: R2Bucket;
  BACKUP_WEBHOOK_URL?: string;
  TELEGRAM_BOT_TOKEN?: string;
  TELEGRAM_ADMIN_CHAT_ID?: string;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Cron —Å–æ–±—ã—Ç–∏—è
 */
export async function handleScheduledBackup(
  event: ScheduledEvent,
  env: Env,
  ctx: ExecutionContext
): Promise<void> {
  console.log('üïê Starting scheduled backup at:', new Date().toISOString());

  try {
    // –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
    const result = await createBackup(env);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30)
    if (env.BACKUP_BUCKET) {
      await cleanupOldBackups(env.BACKUP_BUCKET, 30);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if (env.TELEGRAM_BOT_TOKEN && env.TELEGRAM_ADMIN_CHAT_ID) {
      await sendTelegramNotification(env, {
        status: 'success',
        timestamp: result.timestamp,
        tables: result.tables,
        size: result.size,
        location: result.location,
      });
    }

    console.log('‚úÖ Scheduled backup completed successfully');

  } catch (error: any) {
    console.error('‚ùå Scheduled backup failed:', error);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (env.TELEGRAM_BOT_TOKEN && env.TELEGRAM_ADMIN_CHAT_ID) {
      await sendTelegramNotification(env, {
        status: 'error',
        error: error.message,
      });
    }

    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramNotification(
  env: Env,
  data: {
    status: 'success' | 'error';
    timestamp?: string;
    tables?: string[];
    size?: number;
    location?: string;
    error?: string;
  }
): Promise<void> {
  if (!env.TELEGRAM_BOT_TOKEN || !env.TELEGRAM_ADMIN_CHAT_ID) {
    return;
  }

  let message = '';

  if (data.status === 'success') {
    message = `‚úÖ *Database Backup Successful*\n\n`;
    message += `üìÖ Time: ${data.timestamp}\n`;
    message += `üìä Tables: ${data.tables?.join(', ')}\n`;
    message += `üíæ Size: ${(data.size! / 1024).toFixed(2)} KB\n`;
    if (data.location) {
      message += `üìç Location: ${data.location}\n`;
    }
  } else {
    message = `‚ùå *Database Backup Failed*\n\n`;
    message += `‚ö†Ô∏è Error: ${data.error}\n`;
    message += `üìÖ Time: ${new Date().toISOString()}\n`;
  }

  try {
    await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: env.TELEGRAM_ADMIN_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }),
    });
  } catch (error) {
    console.error('Failed to send Telegram notification:', error);
  }
}

