/**
 * Cron job –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ live —Å—á–µ—Ç–∞ –º–∞—Ç—á–µ–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä–æ–≤—ã—Ö –¥–Ω–µ–π
 */

import type { Env } from '../worker.js';
import { PrismaClient } from '@prisma/client';
import { PrismaD1 } from '@prisma/adapter-d1';
import { syncChampionsLeague } from '../services/footballData.js';
import pino from 'pino';

const createLogger = (env: Env) => {
  return pino({ 
    level: env.LOG_LEVEL || 'info',
    browser: {
      write: {
        info: console.log,
        error: console.error,
        warn: console.warn,
        debug: console.debug,
      }
    }
  });
};

export async function handleLiveSyncJob(
  event: ScheduledEvent,
  env: Env,
  ctx: ExecutionContext
): Promise<void> {
  const logger = createLogger(env);
  const startTime = Date.now();
  
  logger.info({ cron: event.cron, scheduledTime: event.scheduledTime }, '[LiveSync] Starting live score sync job');

  try {
    // –°–æ–∑–¥–∞–µ–º Prisma client —Å D1 –∞–¥–∞–ø—Ç–µ—Ä–æ–º
    const adapter = new PrismaD1(env.DB);
    const prisma = new PrismaClient({ adapter } as any);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    const currentYear = new Date().getFullYear();
    const result = await syncChampionsLeague(prisma, currentYear, env);
    
    const duration = Date.now() - startTime;
    
    logger.info({ 
      count: result.count,
      duration,
      season: currentYear 
    }, '[LiveSync] Live score sync completed successfully');

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å live –º–∞—Ç—á–∏
    if (env.TELEGRAM_BOT_TOKEN && env.TELEGRAM_ADMIN_CHAT_ID) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ live –º–∞—Ç—á–∞–º
        const liveMatches = await prisma.match.count({
          where: {
            status: {
              in: ['IN_PLAY', 'LIVE', 'PAUSED']
            }
          }
        });

        if (liveMatches > 0) {
          // –ü–æ–ª—É—á–∞–µ–º live –º–∞—Ç—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          const matches = await prisma.match.findMany({
            where: {
              status: {
                in: ['IN_PLAY', 'LIVE', 'PAUSED']
              }
            },
            select: {
              homeTeam: true,
              awayTeam: true,
              scoreHome: true,
              scoreAway: true,
              status: true
            },
            take: 10
          });

          const matchList = matches.map(m => 
            `‚öΩ ${m.homeTeam} ${m.scoreHome ?? '?'}:${m.scoreAway ?? '?'} ${m.awayTeam} (${m.status})`
          ).join('\n');

          const message = `üîÑ *Live Sync Job*\n\n` +
            `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${result.count} –º–∞—Ç—á–µ–π\n` +
            `‚öΩ Live –º–∞—Ç—á–µ–π: ${liveMatches}\n` +
            `‚è± –í—Ä–µ–º—è: ${duration}ms\n\n` +
            `${matchList}`;

          await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: env.TELEGRAM_ADMIN_CHAT_ID,
              text: message,
              parse_mode: 'Markdown'
            })
          });
        }
      } catch (notifyError) {
        logger.warn({ error: notifyError }, '[LiveSync] Failed to send Telegram notification');
      }
    }

  } catch (error: any) {
    const duration = Date.now() - startTime;
    
    logger.error({ 
      error: error.message,
      stack: error.stack,
      duration 
    }, '[LiveSync] Live score sync job failed');

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
    if (env.TELEGRAM_BOT_TOKEN && env.TELEGRAM_ADMIN_CHAT_ID) {
      try {
        const message = `‚ùå *Live Sync Job Failed*\n\n` +
          `Error: ${error.message}\n` +
          `Duration: ${duration}ms\n` +
          `Time: ${new Date().toISOString()}`;

        await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: env.TELEGRAM_ADMIN_CHAT_ID,
            text: message,
            parse_mode: 'Markdown'
          })
        });
      } catch (notifyError) {
        logger.warn({ error: notifyError }, '[LiveSync] Failed to send error notification');
      }
    }

    throw error;
  }
}

