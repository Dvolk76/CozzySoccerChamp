#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç—á–µ–π
 */

function getMatchStatus(match) {
  const now = new Date();
  const matchTime = new Date(match.kickoffAt);
  const minutesFromKickoff = Math.max(0, Math.floor((now.getTime() - matchTime.getTime()) / 60000));
  const hasScore = match.scoreHome !== null && match.scoreAway !== null;
  
  // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
  const HOURS_AGO_THRESHOLD = 180; // 3 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  const MAX_MATCH_DURATION = 240; // 4 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  
  // –ï—Å–ª–∏ –º–∞—Ç—á –±—ã–ª –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏ –µ—Å—Ç—å —Å—á–µ—Ç, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
  if (minutesFromKickoff >= HOURS_AGO_THRESHOLD && hasScore) {
    return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', class: 'finished', isLive: false, isFinished: true };
  }
  
  // –ï—Å–ª–∏ –º–∞—Ç—á –±—ã–ª –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  if (minutesFromKickoff >= MAX_MATCH_DURATION) {
    return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', class: 'finished', isLive: false, isFinished: true };
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
  switch (match.status) {
    case 'SCHEDULED':
      return { text: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', class: 'scheduled', isLive: false, isFinished: false };
    
    case 'TIMED': {
      // TIMED –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –º–∞—Ç—á–∞ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
      if (now >= matchTime) {
        // –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –Ω–æ –º–∞—Ç—á –µ—â–µ –Ω–µ –ø–µ—Ä–µ—à–µ–ª –≤ IN_PLAY - —Å—á–∏—Ç–∞–µ–º –Ω–∞—á–∞—Ç—ã–º
        return { text: '–ù–∞—á–∞—Ç', class: 'live', isLive: true, isFinished: false };
      } else {
        // –í—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ - –º–∞—Ç—á –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
        return { text: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', class: 'scheduled', isLive: false, isFinished: false };
      }
    }
    
    case 'IN_PLAY':
    case 'LIVE':
      return { text: '–í –∏–≥—Ä–µ', class: 'live', isLive: true, isFinished: false };
    
    case 'PAUSED':
      return { text: '–ü–∞—É–∑–∞', class: 'paused', isLive: true, isFinished: false };
    
    case 'FINISHED':
      return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', class: 'finished', isLive: false, isFinished: true };
    
    case 'POSTPONED':
      return { text: '–û—Ç–ª–æ–∂–µ–Ω', class: 'postponed', isLive: false, isFinished: false };
    
    case 'SUSPENDED':
      return { text: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', class: 'suspended', isLive: false, isFinished: false };
    
    case 'CANCELLED':
      return { text: '–û—Ç–º–µ–Ω–µ–Ω', class: 'cancelled', isLive: false, isFinished: false };
    
    case 'AWARDED':
      return { text: '–ü—Ä–∏—Å—É–∂–¥–µ–Ω', class: 'awarded', isLive: false, isFinished: true };
    
    case 'NO_PLAY':
      return { text: '–ù–µ —Å–æ—Å—Ç–æ—è–ª—Å—è', class: 'no-play', isLive: false, isFinished: false };
    
    default:
      if (hasScore) {
        return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', class: 'finished', isLive: false, isFinished: true };
      }
      if (now >= matchTime) {
        return { text: '–í –∏–≥—Ä–µ', class: 'live', isLive: true, isFinished: false };
      }
      return { text: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', class: 'scheduled', isLive: false, isFinished: false };
  }
}

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç—á–µ–π...\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testMatches = [
  {
    status: 'SCHEDULED',
    kickoffAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // –∑–∞–≤—Ç—Ä–∞
    scoreHome: null,
    scoreAway: null
  },
  {
    status: 'TIMED',
    kickoffAt: new Date(Date.now() - 30 * 60 * 1000), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    scoreHome: 1,
    scoreAway: 0
  },
  {
    status: 'TIMED',
    kickoffAt: new Date(Date.now() + 2 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ (–±—É–¥—É—â–∏–π)
    scoreHome: null,
    scoreAway: null
  },
  {
    status: 'IN_PLAY',
    kickoffAt: new Date(Date.now() - 60 * 60 * 1000), // 1 —á–∞—Å –Ω–∞–∑–∞–¥
    scoreHome: 2,
    scoreAway: 1
  },
  {
    status: 'PAUSED',
    kickoffAt: new Date(Date.now() - 90 * 60 * 1000), // 1.5 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    scoreHome: 1,
    scoreAway: 1
  },
  {
    status: 'FINISHED',
    kickoffAt: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    scoreHome: 3,
    scoreAway: 2
  },
  {
    status: 'TIMED',
    kickoffAt: new Date(Date.now() - 5 * 60 * 60 * 1000), // 5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ (—Å—Ç–∞—Ä—ã–π)
    scoreHome: null,
    scoreAway: null
  },
  {
    status: 'POSTPONED',
    kickoffAt: new Date(Date.now() + 2 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    scoreHome: null,
    scoreAway: null
  },
  {
    status: 'CANCELLED',
    kickoffAt: new Date(Date.now() + 3 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
    scoreHome: null,
    scoreAway: null
  },
  {
    status: 'AWARDED',
    kickoffAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    scoreHome: 3,
    scoreAway: 0
  },
  {
    status: 'NO_PLAY',
    kickoffAt: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    scoreHome: null,
    scoreAway: null
  }
];

testMatches.forEach((match, index) => {
  console.log(`üìã –¢–µ—Å—Ç ${index + 1}: ${match.status}`);
  console.log(`   –í—Ä–µ–º—è: ${match.kickoffAt.toLocaleString('ru-RU')}`);
  console.log(`   –°—á–µ—Ç: ${match.scoreHome || '?'}:${match.scoreAway || '?'}`);
  
  const status = getMatchStatus(match);
  
  console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${status.text} (${status.class})`);
  console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${status.isLive ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω: ${status.isFinished ? '‚úÖ' : '‚ùå'}`);
  console.log('');
});

console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
