#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö D1 –∏–∑ –±–µ–∫–∞–ø–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/restore-backup.mjs --input backup.json
 *   node scripts/restore-backup.mjs --input backup.json --confirm
 */

import { spawn } from 'child_process';
import { readFile } from 'fs/promises';
import { createInterface } from 'readline';

const DB_NAME = 'cozy-soccer-champ-db';

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const args = process.argv.slice(2);
const inputIndex = args.indexOf('--input');
const confirmFlag = args.includes('--confirm');

if (inputIndex === -1 || !args[inputIndex + 1]) {
  console.error('‚ùå Error: --input <file> is required');
  console.log('');
  console.log('Usage:');
  console.log('  node scripts/restore-backup.mjs --input backup.json');
  console.log('  node scripts/restore-backup.mjs --input backup.json --confirm');
  process.exit(1);
}

const inputFile = args[inputIndex + 1];

async function executeQuery(query) {
  return new Promise((resolve, reject) => {
    const cmd = spawn('npx', ['wrangler', 'd1', 'execute', DB_NAME, '--command', query], {
      stdio: 'inherit'
    });

    cmd.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`wrangler command failed with code ${code}`));
        return;
      }
      resolve();
    });
  });
}

async function confirmRestore() {
  if (confirmFlag) {
    return true;
  }

  const rl = createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question('\n‚ö†Ô∏è  This will REPLACE all data in the database. Continue? (yes/no): ', (answer) => {
      rl.close();
      resolve(answer.toLowerCase() === 'yes');
    });
  });
}

async function main() {
  try {
    console.log('üîÑ Loading backup file...');
    console.log(`üìÅ Input: ${inputFile}`);
    
    const json = await readFile(inputFile, 'utf-8');
    const backupData = JSON.parse(json);

    console.log('üì¶ Backup info:');
    console.log(`   Timestamp: ${backupData.timestamp}`);
    console.log(`   Version: ${backupData.version}`);
    console.log(`   Tables: ${Object.keys(backupData.tables).join(', ')}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    let totalRows = 0;
    for (const [tableName, rows] of Object.entries(backupData.tables)) {
      totalRows += rows.length;
    }
    console.log(`   Total rows: ${totalRows}`);

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmed = await confirmRestore();
    
    if (!confirmed) {
      console.log('');
      console.log('‚ùå Restore cancelled by user');
      process.exit(0);
    }

    console.log('');
    console.log('üîÑ Starting restore...');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const [tableName, rows] of Object.entries(backupData.tables)) {
      if (!Array.isArray(rows) || rows.length === 0) {
        console.log(`‚è≠Ô∏è  Skipping ${tableName} (no data)`);
        continue;
      }

      console.log(`üìä Restoring ${tableName} (${rows.length} rows)...`);

      // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
      console.log(`   üóëÔ∏è  Clearing table...`);
      await executeQuery(`DELETE FROM ${tableName}`);

      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏—è–º–∏
      const batchSize = 50; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
      for (let i = 0; i < rows.length; i += batchSize) {
        const batch = rows.slice(i, i + batchSize);
        
        for (const row of batch) {
          const columns = Object.keys(row);
          const values = columns.map(col => {
            const value = row[col];
            if (value === null) return 'NULL';
            if (typeof value === 'number') return value;
            if (typeof value === 'string') {
              // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
              return `'${value.replace(/'/g, "''")}'`;
            }
            return `'${String(value).replace(/'/g, "''")}'`;
          });

          const query = `INSERT OR REPLACE INTO ${tableName} (${columns.join(', ')}) VALUES (${values.join(', ')})`;
          
          try {
            await executeQuery(query);
          } catch (error) {
            console.error(`   ‚ö†Ô∏è  Failed to insert row:`, error.message);
          }
        }
        
        const progress = Math.min(i + batchSize, rows.length);
        console.log(`   üìù Progress: ${progress}/${rows.length}`);
      }

      console.log(`   ‚úì ${tableName} restored`);
    }

    console.log('');
    console.log('‚úÖ Restore completed successfully!');
    console.log('');
    console.log('üìä Summary:');
    for (const [tableName, rows] of Object.entries(backupData.tables)) {
      console.log(`   ${tableName}: ${rows.length} rows`);
    }

  } catch (error) {
    console.error('');
    console.error('‚ùå Restore failed:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

main();

