#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function manualScoreUpdate() {
  try {
    console.log('üîß –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π...\n');

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∏, –Ω–æ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const matchesWithPredictions = await prisma.match.findMany({
      where: {
        predictions: {
          some: {}
        },
        OR: [
          { scoreHome: null },
          { scoreAway: null }
        ]
      },
      include: {
        predictions: {
          include: {
            user: {
              select: { name: true }
            }
          }
        }
      },
      orderBy: { kickoffAt: 'asc' }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${matchesWithPredictions.length} –º–∞—Ç—á–µ–π —Å —Å—Ç–∞–≤–∫–∞–º–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n`);

    if (matchesWithPredictions.length === 0) {
      console.log('‚úÖ –í—Å–µ –º–∞—Ç—á–∏ —Å —Å—Ç–∞–≤–∫–∞–º–∏ —É–∂–µ –∏–º–µ—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    for (const match of matchesWithPredictions) {
      console.log(`‚öΩ ${match.homeTeam} vs ${match.awayTeam}`);
      console.log(`   üìÖ ${new Date(match.kickoffAt).toLocaleString('ru-RU')}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${match.status}`);
      console.log(`   ü•Ö –¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${match.scoreHome ?? 'null'}:${match.scoreAway ?? 'null'}`);
      console.log(`   üë• –°—Ç–∞–≤–æ–∫: ${match.predictions.length}`);
      
      match.predictions.forEach(pred => {
        console.log(`      ${pred.user.name}: ${pred.predHome}:${pred.predAway}`);
      });
      console.log('');
    }

    console.log('üí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:');
    console.log('   node scripts/update-match-score.mjs <matchId> <homeScore> <awayScore>');
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –º–∞—Ç—á–µ–π:');
    
    matchesWithPredictions.forEach(match => {
      console.log(`   ${match.id} - ${match.homeTeam} vs ${match.awayTeam}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
manualScoreUpdate();
