#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';

async function checkMatches() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const totalMatches = await prisma.match.count();
    console.log(`üìä –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –≤ –±–∞–∑–µ: ${totalMatches}`);
    
    if (totalMatches === 0) {
      console.log('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –º–∞—Ç—á–µ–π!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusCounts = await prisma.match.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    statusCounts.forEach(group => {
      console.log(`  - ${group.status}: ${group._count.status} –º–∞—Ç—á–µ–π`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á–∏ –Ω–∞ 30 —Å–µ–Ω—Ç—è–±—Ä—è
    const september30Matches = await prisma.match.findMany({
      where: {
        kickoffAt: {
          gte: new Date('2024-09-30T00:00:00Z'),
          lt: new Date('2024-10-01T00:00:00Z')
        }
      },
      select: {
        id: true,
        homeTeam: true,
        awayTeam: true,
        kickoffAt: true,
        status: true,
        scoreHome: true,
        scoreAway: true
      }
    });
    
    console.log(`\nüìÖ –ú–∞—Ç—á–∏ –Ω–∞ 30 —Å–µ–Ω—Ç—è–±—Ä—è: ${september30Matches.length}`);
    
    if (september30Matches.length > 0) {
      september30Matches.forEach(match => {
        const kickoffTime = new Date(match.kickoffAt);
        const now = new Date();
        const hoursAgo = Math.floor((now.getTime() - kickoffTime.getTime()) / (1000 * 60 * 60));
        console.log(`  - ${match.homeTeam} vs ${match.awayTeam} (${kickoffTime.toLocaleString('ru-RU')}) - ${hoursAgo}—á –Ω–∞–∑–∞–¥, —Å—Ç–∞—Ç—É—Å: ${match.status}, —Å—á–µ—Ç: ${match.scoreHome || '?'}:${match.scoreAway || '?'}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const now = new Date();
    const fourHoursAgo = new Date(now.getTime() - 4 * 60 * 60 * 1000);
    
    const problematicMatches = await prisma.match.findMany({
      where: {
        kickoffAt: {
          lt: fourHoursAgo
        },
        status: {
          in: ['LIVE', 'IN_PLAY', 'PAUSED']
        }
      },
      select: {
        id: true,
        homeTeam: true,
        awayTeam: true,
        kickoffAt: true,
        status: true,
        scoreHome: true,
        scoreAway: true
      }
    });
    
    console.log(`\n‚ö†Ô∏è  –ú–∞—Ç—á–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏: ${problematicMatches.length}`);
    
    if (problematicMatches.length > 0) {
      problematicMatches.forEach(match => {
        const kickoffTime = new Date(match.kickoffAt);
        const hoursAgo = Math.floor((now.getTime() - kickoffTime.getTime()) / (1000 * 60 * 60));
        console.log(`  - ${match.homeTeam} vs ${match.awayTeam} (${kickoffTime.toLocaleString('ru-RU')}) - ${hoursAgo}—á –Ω–∞–∑–∞–¥, —Å—Ç–∞—Ç—É—Å: ${match.status}, —Å—á–µ—Ç: ${match.scoreHome || '?'}:${match.scoreAway || '?'}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ç—á–µ–π:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

checkMatches();
