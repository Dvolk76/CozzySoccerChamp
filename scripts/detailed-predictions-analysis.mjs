#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function detailedAnalysis() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞–≤–∫–∞–º–∏ –∏ —Å—á–µ—Ç–∞–º–∏
    const users = await prisma.user.findMany({
      include: {
        predictions: {
          include: {
            match: {
              select: {
                homeTeam: true,
                awayTeam: true,
                kickoffAt: true,
                status: true,
                scoreHome: true,
                scoreAway: true,
                stage: true,
                group: true,
                matchday: true
              }
            }
          }
        },
        scores: true,
        predictionHistories: {
          include: {
            match: {
              select: {
                homeTeam: true,
                awayTeam: true,
                kickoffAt: true,
                status: true,
                scoreHome: true,
                scoreAway: true
              }
            }
          }
        }
      },
      orderBy: { name: 'asc' }
    });

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –∏–≥—Ä–æ–∫–æ–≤\n`);

    for (const user of users) {
      console.log(`üéØ ${user.name} (ID: ${user.id})`);
      console.log(`   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleString('ru-RU')}`);
      
      if (user.scores.length > 0) {
        const score = user.scores[0];
        console.log(`   üèÜ –û—á–∫–∏: ${score.pointsTotal}`);
        console.log(`   üéØ –¢–æ—á–Ω—ã–µ: ${score.exactCount} (5 –æ—á–∫–æ–≤)`);
        console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞: ${score.diffCount} (3 –æ—á–∫–∞)`);
        console.log(`   üé≤ –ò—Å—Ö–æ–¥: ${score.outcomeCount} (2 –æ—á–∫–∞)`);
        console.log(`   ‚è∞ –ü–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${score.firstPredAt ? new Date(score.firstPredAt).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      } else {
        console.log(`   üèÜ –û—á–∫–∏: 0 (–Ω–µ—Ç —Å—á–µ—Ç–∞)`);
      }

      console.log(`   üìù –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (${user.predictions.length}):`);
      
      if (user.predictions.length === 0) {
        console.log('      –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫');
      } else {
        user.predictions.forEach(pred => {
          const match = pred.match;
          const result = match.scoreHome !== null && match.scoreAway !== null 
            ? ` ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${match.scoreHome}:${match.scoreAway}`
            : '';
          
          console.log(`      ${match.homeTeam} vs ${match.awayTeam}: ${pred.predHome}:${pred.predAway}${result}`);
          console.log(`         üìÖ ${new Date(match.kickoffAt).toLocaleString('ru-RU')} | ${match.status}`);
        });
      }

      console.log(`   üìö –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ (${user.predictionHistories.length}):`);
      
      if (user.predictionHistories.length === 0) {
        console.log('      –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      } else {
        user.predictionHistories.forEach(hist => {
          const match = hist.match;
          const result = match.scoreHome !== null && match.scoreAway !== null 
            ? ` ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${match.scoreHome}:${match.scoreAway}`
            : '';
          
          console.log(`      ${match.homeTeam} vs ${match.awayTeam}: ${hist.predHome}:${hist.predAway}${result}`);
          console.log(`         üìÖ –ò–∑–º–µ–Ω–µ–Ω–æ: ${new Date(hist.createdAt).toLocaleString('ru-RU')}`);
        });
      }

      console.log('');
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    const totalPredictions = await prisma.prediction.count();
    const totalHistory = await prisma.predictionHistory.count();
    const finishedMatches = await prisma.match.count({
      where: { status: 'FINISHED' }
    });
    const upcomingMatches = await prisma.match.count({
      where: { status: 'TIMED' }
    });

    console.log(`   üìù –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${totalPredictions}`);
    console.log(`   üìö –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞–≤–æ–∫: ${totalHistory}`);
    console.log(`   ‚öΩ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${finishedMatches}`);
    console.log(`   ‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π: ${upcomingMatches}`);

    // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º
    const topPlayers = await prisma.score.findMany({
      include: {
        user: {
          select: { name: true }
        }
      },
      orderBy: { pointsTotal: 'desc' },
      take: 5
    });

    if (topPlayers.length > 0) {
      console.log('\nüèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º:');
      topPlayers.forEach((score, index) => {
        console.log(`   ${index + 1}. ${score.user.name}: ${score.pointsTotal} –æ—á–∫–æ–≤`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
detailedAnalysis();
