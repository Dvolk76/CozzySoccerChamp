// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å football-data.org
const FOOTBALL_API_TOKEN = '96637ff475924456a64fa80adc981cbb';
const BASE_URL = 'https://api.football-data.org/v4';

async function testSync() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API football-data.org...\n');
  
  const season = 2025;
  const url = `${BASE_URL}/competitions/CL/matches?season=${season}`;
  
  console.log(`üì° –ó–∞–ø—Ä–æ—Å: ${url}\n`);
  
  try {
    const res = await fetch(url, { 
      headers: { 'X-Auth-Token': FOOTBALL_API_TOKEN } 
    });
    
    console.log(`Status: ${res.status}`);
    console.log(`Headers:`, Object.fromEntries(res.headers.entries()));
    
    if (!res.ok) {
      const text = await res.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${text}`);
      return;
    }
    
    const data = await res.json();
    
    console.log(`\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞—Ç—á–µ–π: ${data.matches?.length || 0}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    const finishedMatches = data.matches.filter(m => m.status === 'FINISHED');
    console.log(`\nüìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${finishedMatches.length}`);
    
    if (finishedMatches.length > 0) {
      console.log('\nüèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π:');
      finishedMatches.slice(-5).forEach(m => {
        console.log(`  ${m.homeTeam.name} ${m.score.fullTime.home}:${m.score.fullTime.away} ${m.awayTeam.name}`);
        console.log(`    ID: ${m.id}, Status: ${m.status}, Date: ${m.utcDate}`);
      });
    }
    
    // Rate limiting info
    const remaining = res.headers.get('X-Requests-Available-Minute');
    const limit = res.headers.get('X-RequestCounter-Reset');
    console.log(`\n‚è±Ô∏è  Rate Limiting:`);
    console.log(`   Remaining requests: ${remaining || 'N/A'}`);
    console.log(`   Reset: ${limit || 'N/A'}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testSync();
