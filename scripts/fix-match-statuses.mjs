#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç—á–µ–π
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å FINISHED –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π
 */

import { PrismaClient } from '@prisma/client';

async function fixMatchStatuses() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏...');
    
    const now = new Date();
    const fourHoursAgo = new Date(now.getTime() - 4 * 60 * 60 * 1000);
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –Ω–æ –≤—Å–µ –µ—â–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å LIVE/IN_PLAY/PAUSED
    const problematicMatches = await prisma.match.findMany({
      where: {
        kickoffAt: {
          lt: fourHoursAgo
        },
        status: {
          in: ['LIVE', 'IN_PLAY', 'PAUSED']
        }
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${problematicMatches.length} –º–∞—Ç—á–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏`);
    
    if (problematicMatches.length === 0) {
      console.log('‚úÖ –í—Å–µ –º–∞—Ç—á–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
    problematicMatches.forEach(match => {
      const kickoffTime = new Date(match.kickoffAt);
      const hoursAgo = Math.floor((now.getTime() - kickoffTime.getTime()) / (1000 * 60 * 60));
      console.log(`  - ${match.homeTeam} vs ${match.awayTeam} (${kickoffTime.toLocaleDateString('ru-RU')} ${kickoffTime.toLocaleTimeString('ru-RU')}) - ${hoursAgo}—á –Ω–∞–∑–∞–¥, —Å—Ç–∞—Ç—É—Å: ${match.status}`);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤...');
    
    const updateResult = await prisma.match.updateMany({
      where: {
        kickoffAt: {
          lt: fourHoursAgo
        },
        status: {
          in: ['LIVE', 'IN_PLAY', 'PAUSED']
        }
      },
      data: {
        status: 'FINISHED'
      }
    });
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.count} –º–∞—Ç—á–µ–π`);
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±–æ–ª–µ–µ 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    const sixHoursAgo = new Date(now.getTime() - 6 * 60 * 60 * 1000);
    
    const oldMatchesResult = await prisma.match.updateMany({
      where: {
        kickoffAt: {
          lt: sixHoursAgo
        },
        status: {
          not: 'FINISHED'
        }
      },
      data: {
        status: 'FINISHED'
      }
    });
    
    if (oldMatchesResult.count > 0) {
      console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${oldMatchesResult.count} –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π`);
    }
    
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixMatchStatuses();
