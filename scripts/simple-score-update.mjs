#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function updateMatchScore(matchId, homeScore, awayScore) {
  try {
    console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId} –Ω–∞ ${homeScore}:${awayScore}...\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ç—á
    const match = await prisma.match.findUnique({
      where: { id: matchId },
      include: {
        predictions: {
          include: {
            user: {
              select: { name: true }
            }
          }
        }
      }
    });

    if (!match) {
      console.log('‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚öΩ ${match.homeTeam} vs ${match.awayTeam}`);
    console.log(`   üìÖ ${new Date(match.kickoffAt).toLocaleString('ru-RU')}`);
    console.log(`   ü•Ö –°—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${match.scoreHome ?? 'null'}:${match.scoreAway ?? 'null'}`);
    console.log(`   ü•Ö –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${homeScore}:${awayScore}`);
    console.log(`   üë• –°—Ç–∞–≤–æ–∫: ${match.predictions.length}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    console.log('üìù –°—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:');
    match.predictions.forEach(pred => {
      console.log(`   ${pred.user.name}: ${pred.predHome}:${pred.predAway}`);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
    await prisma.match.update({
      where: { id: matchId },
      data: {
        scoreHome: parseInt(homeScore),
        scoreAway: parseInt(awayScore),
        status: 'FINISHED'
      }
    });

    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log('üí° –î–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/recalc-scores.mjs');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.length !== 3) {
  console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/simple-score-update.mjs <matchId> <homeScore> <awayScore>');
  console.log('–ü—Ä–∏–º–µ—Ä: node scripts/simple-score-update.mjs cmfphmro701mzg56qo4u9is9w 2 1');
  process.exit(1);
}

const [matchId, homeScore, awayScore] = args;

// –í–∞–ª–∏–¥–∞—Ü–∏—è
if (isNaN(parseInt(homeScore)) || isNaN(parseInt(awayScore))) {
  console.log('‚ùå –°—á–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
  process.exit(1);
}

updateMatchScore(matchId, homeScore, awayScore);
