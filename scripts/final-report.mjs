#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function generateFinalReport() {
  try {
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–ê–í–ö–ê–ú –ò–ì–†–û–ö–û–í\n');
    console.log('=' .repeat(60));

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalUsers = await prisma.user.count();
    const totalPredictions = await prisma.prediction.count();
    const totalMatches = await prisma.match.count();
    const finishedMatches = await prisma.match.count({ where: { status: 'FINISHED' } });
    const matchesWithResults = await prisma.match.count({
      where: {
        status: 'FINISHED',
        scoreHome: { not: null },
        scoreAway: { not: null }
      }
    });

    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${totalUsers}`);
    console.log(`   üìù –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${totalPredictions}`);
    console.log(`   ‚öΩ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${totalMatches}`);
    console.log(`   üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${finishedMatches}`);
    console.log(`   ü•Ö –ú–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ${matchesWithResults}\n`);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–æ–∫–∞–º
    const users = await prisma.user.findMany({
      include: {
        predictions: {
          include: {
            match: {
              select: {
                homeTeam: true,
                awayTeam: true,
                kickoffAt: true,
                status: true,
                scoreHome: true,
                scoreAway: true
              }
            }
          }
        },
        scores: true
      },
      orderBy: { name: 'asc' }
    });

    console.log('üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ì–†–û–ö–ê–ú:');
    console.log('=' .repeat(60));

    for (const user of users) {
      console.log(`\nüéØ ${user.name}`);
      console.log(`   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleString('ru-RU')}`);
      
      if (user.scores.length > 0) {
        const score = user.scores[0];
        console.log(`   üèÜ –û—á–∫–∏: ${score.pointsTotal}`);
        console.log(`   üéØ –¢–æ—á–Ω—ã–µ: ${score.exactCount} (5 –æ—á–∫–æ–≤)`);
        console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞: ${score.diffCount} (3 –æ—á–∫–∞)`);
        console.log(`   üé≤ –ò—Å—Ö–æ–¥: ${score.outcomeCount} (2 –æ—á–∫–∞)`);
      } else {
        console.log(`   üèÜ –û—á–∫–∏: 0`);
      }

      const finishedPredictions = user.predictions.filter(p => 
        p.match.status === 'FINISHED' && 
        p.match.scoreHome !== null && 
        p.match.scoreAway !== null
      );

      console.log(`   üìù –°—Ç–∞–≤–æ–∫ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏: ${finishedPredictions.length}`);

      if (finishedPredictions.length > 0) {
        console.log(`   üìä –î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–æ–∫:`);
        finishedPredictions.forEach(pred => {
          const match = pred.match;
          const result = `${match.scoreHome}:${match.scoreAway}`;
          const prediction = `${pred.predHome}:${pred.predAway}`;
          
          // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
          let accuracy = '';
          if (pred.predHome === match.scoreHome && pred.predAway === match.scoreAway) {
            accuracy = 'üéØ –¢–û–ß–ù–û (5 –æ—á–∫–æ–≤)';
          } else if ((pred.predHome > pred.predAway && match.scoreHome > match.scoreAway) ||
                     (pred.predHome < pred.predAway && match.scoreHome < match.scoreAway) ||
                     (pred.predHome === pred.predAway && match.scoreHome === match.scoreAway)) {
            accuracy = 'üé≤ –ò—Å—Ö–æ–¥ —É–≥–∞–¥–∞–Ω (2 –æ—á–∫–∞)';
          } else {
            accuracy = '‚ùå –ù–µ —É–≥–∞–¥–∞–Ω–æ';
          }
          
          console.log(`      ${match.homeTeam} vs ${match.awayTeam}: ${prediction} ‚Üí ${result} ${accuracy}`);
        });
      }

      const upcomingPredictions = user.predictions.filter(p => p.match.status === 'TIMED');
      if (upcomingPredictions.length > 0) {
        console.log(`   ‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ç–∞–≤–∫–∏: ${upcomingPredictions.length}`);
        upcomingPredictions.forEach(pred => {
          console.log(`      ${pred.match.homeTeam} vs ${pred.match.awayTeam}: ${pred.predHome}:${pred.predAway}`);
        });
      }
    }

    // –¢–æ–ø –º–∞—Ç—á–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞–≤–æ–∫
    console.log('\n‚öΩ –¢–û–ü –ú–ê–¢–ß–ï–ô –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–¢–ê–í–û–ö:');
    console.log('=' .repeat(60));

    const matchesWithPredictionCount = await prisma.match.findMany({
      include: {
        predictions: {
          include: {
            user: {
              select: { name: true }
            }
          }
        },
        _count: {
          select: { predictions: true }
        }
      },
      where: {
        predictions: {
          some: {}
        }
      },
      orderBy: {
        predictions: {
          _count: 'desc'
        }
      }
    });

    matchesWithPredictionCount.forEach((match, index) => {
      console.log(`\n${index + 1}. ${match.homeTeam} vs ${match.awayTeam}`);
      console.log(`   üìÖ ${new Date(match.kickoffAt).toLocaleString('ru-RU')}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${match.status}`);
      if (match.scoreHome !== null && match.scoreAway !== null) {
        console.log(`   ü•Ö –†–µ–∑—É–ª—å—Ç–∞—Ç: ${match.scoreHome}:${match.scoreAway}`);
      }
      console.log(`   üë• –°—Ç–∞–≤–æ–∫: ${match.predictions.length}`);
      
      match.predictions.forEach(pred => {
        console.log(`      ${pred.user.name}: ${pred.predHome}:${pred.predAway}`);
      });
    });

    console.log('\n' + '=' .repeat(60));
    console.log('‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
generateFinalReport();
