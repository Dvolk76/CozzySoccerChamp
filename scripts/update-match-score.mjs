#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ (–∫–æ–ø–∏—è –∏–∑ scoring.ts)
function scoring(pred, actual) {
  if (pred.home === actual.home && pred.away === actual.away) return 5;

  const predDiff = pred.home - pred.away;
  const actualDiff = actual.home - actual.away;

  const predOutcome = Math.sign(predDiff);
  const actualOutcome = Math.sign(actualDiff);

  if (predOutcome === actualOutcome && Math.abs(predDiff) === Math.abs(actualDiff)) return 3;
  if (predOutcome === actualOutcome) return 2;
  return 0;
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ –¥–ª—è –º–∞—Ç—á–∞
async function recalcForMatch(matchId) {
  const match = await prisma.match.findUnique({ where: { id: matchId } });
  if (!match || match.scoreHome == null || match.scoreAway == null) return { updated: 0 };
  const actual = { home: match.scoreHome, away: match.scoreAway };

  const preds = await prisma.prediction.findMany({ where: { matchId } });
  const aggregates = {};

  for (const p of preds) {
    const pts = scoring({ home: p.predHome, away: p.predAway }, actual);
    if (!aggregates[p.userId]) aggregates[p.userId] = { total: 0, exact: 0, diff: 0, outcome: 0 };
    aggregates[p.userId].total += pts;
    if (pts === 5) aggregates[p.userId].exact += 1;
    else if (pts === 3) aggregates[p.userId].diff += 1;
    else if (pts === 2) aggregates[p.userId].outcome += 1;
  }

  const ops = Object.entries(aggregates).map(([userId, a]) =>
    prisma.score.upsert({
      where: { userId },
      create: {
        userId,
        pointsTotal: a.total,
        exactCount: a.exact,
        diffCount: a.diff,
        outcomeCount: a.outcome,
        lastUpdated: new Date(),
      },
      update: {
        pointsTotal: a.total,
        exactCount: a.exact,
        diffCount: a.diff,
        outcomeCount: a.outcome,
        lastUpdated: new Date(),
      },
    })
  );
  await prisma.$transaction(ops);
  return { updated: ops.length };
}

async function updateMatchScore(matchId, homeScore, awayScore) {
  try {
    console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId} –Ω–∞ ${homeScore}:${awayScore}...\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ç—á
    const match = await prisma.match.findUnique({
      where: { id: matchId },
      include: {
        predictions: {
          include: {
            user: {
              select: { name: true }
            }
          }
        }
      }
    });

    if (!match) {
      console.log('‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚öΩ ${match.homeTeam} vs ${match.awayTeam}`);
    console.log(`   üìÖ ${new Date(match.kickoffAt).toLocaleString('ru-RU')}`);
    console.log(`   ü•Ö –°—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${match.scoreHome ?? 'null'}:${match.scoreAway ?? 'null'}`);
    console.log(`   ü•Ö –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${homeScore}:${awayScore}`);
    console.log(`   üë• –°—Ç–∞–≤–æ–∫: ${match.predictions.length}\n`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
    await prisma.match.update({
      where: { id: matchId },
      data: {
        scoreHome: parseInt(homeScore),
        scoreAway: parseInt(awayScore),
        status: 'FINISHED'
      }
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
    console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –æ—á–∫–æ–≤...');
    const result = await recalcForMatch(prisma, matchId);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è ${result.updated} –∏–≥—Ä–æ–∫–æ–≤`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    const updatedScores = await prisma.score.findMany({
      where: {
        user: {
          predictions: {
            some: {
              matchId: matchId
            }
          }
        }
      },
      include: {
        user: {
          select: { name: true }
        }
      }
    });

    console.log('\nüèÜ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:');
    updatedScores.forEach(score => {
      console.log(`   ${score.user.name}: ${score.pointsTotal} –æ—á–∫–æ–≤ (${score.exactCount} —Ç–æ—á–Ω—ã—Ö, ${score.diffCount} —Ä–∞–∑–Ω–∏—Ü, ${score.outcomeCount} –∏—Å—Ö–æ–¥–æ–≤)`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.length !== 3) {
  console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/update-match-score.mjs <matchId> <homeScore> <awayScore>');
  console.log('–ü—Ä–∏–º–µ—Ä: node scripts/update-match-score.mjs cmfphmro701mzg56qo4u9is9w 2 1');
  process.exit(1);
}

const [matchId, homeScore, awayScore] = args;

// –í–∞–ª–∏–¥–∞—Ü–∏—è
if (isNaN(parseInt(homeScore)) || isNaN(parseInt(awayScore))) {
  console.log('‚ùå –°—á–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
  process.exit(1);
}

updateMatchScore(matchId, homeScore, awayScore);
